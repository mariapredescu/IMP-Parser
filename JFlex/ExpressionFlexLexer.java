/* The following code was generated by JFlex 1.4.3 on 1/2/19 1:06 PM */

//PREDESCU Maria 334CB

import java.util.*;
import java.util.Stack;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1/2/19 1:06 PM from the specification file
 * <tt>ExpressionFlex.flex</tt>
 */
class ExpressionFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\33\26\0\1\26\4\0\1\24\1\0\1\22\1\23\1\0"+
    "\1\20\3\0\1\21\1\2\11\1\1\0\1\30\1\0\1\27\1\25"+
    "\42\0\1\10\1\17\1\17\1\17\1\6\1\7\1\17\1\16\1\13"+
    "\1\17\1\17\1\11\1\17\1\14\1\17\1\17\1\17\1\4\1\12"+
    "\1\3\1\5\1\17\1\15\1\17\1\17\1\17\1\31\1\0\1\32"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\1\1\3\3\1\4\1\5"+
    "\1\6\1\7\1\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\3\1\0\1\3\1\17\2\3\1\20"+
    "\1\3\1\0\1\3\1\21\1\3\1\22\1\23\1\3"+
    "\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[38];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\34\0\70\0\34\0\124\0\160\0\214\0\250"+
    "\0\304\0\340\0\34\0\34\0\34\0\34\0\374\0\34"+
    "\0\34\0\34\0\34\0\34\0\34\0\34\0\u0118\0\u0134"+
    "\0\u0150\0\160\0\u016c\0\u0188\0\34\0\u01a4\0\u01c0\0\u01dc"+
    "\0\160\0\u01f8\0\34\0\34\0\u0214\0\34";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[38];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\1\10\3\6"+
    "\1\11\1\6\1\12\2\6\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\35\0\2\3\34\0\1\6\1\27\1\6\1\0\11\6"+
    "\17\0\3\6\1\0\11\6\25\0\1\30\25\0\3\6"+
    "\1\0\1\6\1\31\7\6\17\0\3\6\1\0\1\32"+
    "\4\6\1\33\3\6\17\0\3\6\1\0\7\6\1\34"+
    "\1\6\40\0\1\35\12\0\2\6\1\36\1\0\11\6"+
    "\26\0\1\37\24\0\3\6\1\0\2\6\1\40\6\6"+
    "\17\0\1\41\2\6\1\0\11\6\17\0\3\6\1\0"+
    "\4\6\1\42\4\6\17\0\3\6\1\43\11\6\22\0"+
    "\1\44\30\0\3\6\1\0\3\6\1\36\5\6\17\0"+
    "\3\6\1\0\2\6\1\45\6\6\17\0\3\6\1\46"+
    "\11\6\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\6\1\4\11\1\1\7\11"+
    "\1\1\1\0\4\1\1\11\1\1\1\0\3\1\2\11"+
    "\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[38];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //Stiva in care sunt retinute elementele relevante pentru parsarea programului
    Stack<Expression> stack = new Stack<>();

    //ArrayList in care este stocata lista de variabile de la inceputul ficarui program
    ArrayList<Expression> varList = new ArrayList<>();


    //Functie folosita pentru a retine lista de variabile de la inceputul programului
    void varList() {

        while(true) {
            Expression e = stack.peek();
            if(e instanceof Symbol) {
                Symbol s = (Symbol) e;
                if(s.symbol().equals("int")) {
                    break;
                }
            }
            varList.add(stack.pop());
        }
    }


    //Functie ce se apeleaza cand se ajunge la finalul fisierului pentru a adauga nodul
    //final, MainNode, ce primeste ca parametru expresia ce reprezinta arborele programului
    Expression build_tree() {

        Expression tree = null;

        while(!stack.isEmpty()) {
            Expression e2 = stack.peek();
            stack.pop();

            Expression e1 = stack.peek();
            stack.pop();
            if(e1 instanceof Symbol) {
                Symbol s = (Symbol) e1;
                if(s.symbol().equals("int")) {
                    tree = new MainNode(e2);
                }
            } else {
                stack.push(new SequenceNode(e1, e2));
            }
        }
        return tree;
    }


    //Functie ce parseaza o constructie de tip assignment
    Expression solve_assignment() {

        ArrayList<Expression> expr = new ArrayList<>();
        while(true) {
            Expression e = stack.peek();
            if(e instanceof Symbol) {
                Symbol s = (Symbol) e;
                if(s.symbol().equals("=")) {
                    break;
                }
            }
            expr.add(stack.pop());
        }
        Collections.reverse(expr);
        stack.pop();    //extragem "=" de pe stiva
        Expression var = stack.peek();  
        stack.pop();    //extragem variabila de pe stiva

        int i;
        int preced = 0;
        Stack<Integer> op = new Stack<>();
        Stack<Expression> operand = new Stack<>();

        for(i = 0; i < expr.size(); i++) {
            if(expr.get(i) instanceof Symbol) {
                Symbol s = (Symbol) expr.get(i);
                if(s.symbol().equals("+")) {
                    preced = 1;
                } else if(s.symbol().equals("/")) {
                    preced = 2;
                }
                while(!op.isEmpty() && op.peek() >= preced) {
                    int operation = op.peek();
                    op.pop();   //scoatem operatorul de pe stiva
                    Expression op2 = operand.pop(); //scoatem operandul 2 de pe stiva
                    Expression op1 = operand.pop(); //scoatem operandul 1 de pe stiva
                    if(operation == 1) {
                        Expression result = new PlusNode(op1, op2);
                        operand.push(result);
                    } else if(operation == 2) {
                        Expression result = new DivNode(op1, op2);
                        operand.push(result);
                    }
                }
                op.push(preced);
            } else {
                operand.push(expr.get(i));
            }
        }

        while(!op.isEmpty()) {
            int operation = op.peek();
            op.pop();
            Expression op2 = operand.pop();
            Expression op1 = operand.pop();
            if(operation == 1) {
                Expression result = new PlusNode(op1, op2);
                operand.push(result);
            } else if(operation == 2) {
                Expression result = new DivNode(op1, op2);
                operand.push(result);
            }
        }
        return new AssignmentNode((VarNode) var, operand.peek());
    }


    //Functie ce parseaza o constructie de tip paranteza
    Expression solve_bracket() {
        ArrayList<Expression> expr = new ArrayList<>();
        while(true) {
            Expression e = stack.peek();
            if(e instanceof Symbol) {
                Symbol s = (Symbol) e;
                if(s.symbol().equals("(")) {
                    break;
                }   
            }
            expr.add(stack.pop());
        }    
        stack.pop();    //extragem "(" de pe stiva
        Collections.reverse(expr);

        int i;
        int preced = 0;
        Stack<Integer> op = new Stack<>();
        Stack<Expression> operand = new Stack<>();

        for(i = 0; i < expr.size(); i++) {
            if(expr.get(i) instanceof Symbol) {
                Symbol s = (Symbol) expr.get(i);
                if(s.symbol().equals("&&")) {
                    preced = 1;
                } else if(s.symbol().equals("!")) {
                    preced = 2;
                } else if(s.symbol().equals(">")) {
                    preced = 3;
                } else if(s.symbol().equals("+")) {
                    preced = 4;
                } else if(s.symbol().equals("/")) {
                    preced = 5;
                }
                while(!op.isEmpty() && op.peek() >= preced) {
                    int operation = op.peek();
                    op.pop();   //scoatem operatorul de pe stiva
                    if(operation == 1) {
                        Expression op2 = operand.pop(); //scoatem operandul 2 de pe stiva
                        Expression op1 = operand.pop(); //scoatem operandul 1 de pe stiva
                        Expression result = new AndNode(op1, op2);
                        operand.push(result);
                    } else if(operation == 2) {
                        Expression op2 = operand.pop(); //scoatem operandul 2 de pe stiva
                        Expression result = new NotNode(op2);
                        operand.push(result);
                    } else if(operation == 3) {
                        Expression op2 = operand.pop(); //scoatem operandul 2 de pe stiva
                        Expression op1 = operand.pop(); //scoatem operandul 1 de pe stiva
                        Expression result = new GreaterNode(op1, op2);
                        operand.push(result);
                    } else if(operation == 4) {
                        Expression op2 = operand.pop(); //scoatem operandul 2 de pe stiva
                        Expression op1 = operand.pop(); //scoatem operandul 1 de pe stiva
                        Expression result = new PlusNode(op1, op2);
                        operand.push(result);
                    } else if(operation == 5) {
                        Expression op2 = operand.pop(); //scoatem operandul 2 de pe stiva
                        Expression op1 = operand.pop(); //scoatem operandul 1 de pe stiva
                        Expression result = new DivNode(op1, op2);
                        operand.push(result);
                    }
                }
                op.push(preced);
            } else {
                operand.push(expr.get(i));
            }
        }
        while(!op.isEmpty()) {

            int operation = op.peek();
            op.pop();   //scoatem operatorul de pe stiva

            if(operation == 1) {
                Expression op2 = operand.pop(); //scoatem operandul 2 de pe stiva
                Expression op1 = operand.pop(); //scoatem operandul 1 de pe stiva
                Expression result = new AndNode(op1, op2);
                operand.push(result);
            } else if(operation == 2) {
                Expression op2 = operand.pop(); //scoatem operandul 2 de pe stiva
                Expression result = new NotNode(op2);
                operand.push(result);
            } else if(operation == 3) {
                Expression op2 = operand.pop(); //scoatem operandul 2 de pe stiva
                Expression op1 = operand.pop(); //scoatem operandul 1 de pe stiva
                Expression result = new GreaterNode(op1, op2);
                operand.push(result);
            } else if(operation == 4) {
                Expression op2 = operand.pop(); //scoatem operandul 2 de pe stiva
                Expression op1 = operand.pop(); //scoatem operandul 1 de pe stiva
                Expression result = new PlusNode(op1, op2);
                operand.push(result);
            } else if(operation == 5) {
                Expression op2 = operand.pop(); //scoatem operandul 2 de pe stiva
                Expression op1 = operand.pop(); //scoatem operandul 1 de pe stiva
                Expression result = new DivNode(op1, op2);
                operand.push(result);
            }
        }
        return new BracketNode(operand.peek());
    }


    //Functie ce parseaza o constructie de tip block
    Expression solve_block() {
        Expression block = null;
        Expression result = null;
        Stack<Expression> stmt = new Stack<>();
        Stack<Expression> stmtcopy = new Stack<>();
        while(true) {
            Expression e = stack.peek();
            if(e instanceof Symbol) {
                Symbol s = (Symbol) e;
                if(s.symbol().equals("{")) {
                    //stmt.push(e);
                    break;
                }
            }
            stmt.add(stack.pop());
        }
        stmt.add(new Symbol("{"));
        stack.pop();    //extragem "{" de pe stiva

        //inversez stiva cu ajutorul unei stive auxiliare
        while(!stmt.isEmpty()) {
            Expression e = stmt.peek();
            stmtcopy.push(e);
            stmt.pop();
        }

        while(!stmtcopy.isEmpty()) {
            Expression e2 = stmtcopy.peek();
            stmtcopy.pop();
            if(e2 instanceof Symbol) {
                Symbol s = (Symbol) e2;
                if(s.symbol().equals("{")) {
                    block = new BlockNode(null);
                }
            } else {
                Expression e1 = stmtcopy.peek();
                stmtcopy.pop();
                if(e1 instanceof Symbol) {
                    Symbol s = (Symbol) e1;
                    if(s.symbol().equals("{")){
                        block = new BlockNode(e2);
                    }
                } else {
                    stmtcopy.push(new SequenceNode(e1, e2));
                }
            }
        }

        Expression ex = stack.peek();
        if(ex instanceof BracketNode) {
            stack.pop();
            Expression expr = stack.peek();
            if(expr instanceof Symbol) {
                Symbol s = (Symbol) expr;
                if(s.symbol().equals("while")) {
                    stack.pop();    //extragem "while" de pe stiva
                    result = new WhileNode((BracketNode) ex, (BlockNode) block);
                } else {
                    stack.push(ex);
                    result = block;
                }
            }
        } else if(ex instanceof Symbol) {
            Symbol s = (Symbol) ex;
            if(s.symbol().equals("else")) {
                stack.pop();    //extragem "else" de pe stiva
                Expression b1 = stack.pop();    //extragem primul block al if-ului
                Expression br = stack.pop();    //extragem paranteza if-ului
                stack.pop();    //extragem "if" de pe stiva
                result = new IfNode((BracketNode) br, (BlockNode) b1, (BlockNode) block);
            }
        }

        return result;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ExpressionFlexLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ExpressionFlexLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 102) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { System.out.print(yytext());
          }
        case 21: break;
        case 4: 
          { stack.push(new Symbol("+"));
          }
        case 22: break;
        case 10: 
          { stack.push(new Symbol("="));
          }
        case 23: break;
        case 6: 
          { stack.push(new Symbol("("));
          }
        case 24: break;
        case 2: 
          { stack.push(new IntNode(yytext()));
          }
        case 25: break;
        case 15: 
          { stack.push(new Symbol("if"));
          }
        case 26: break;
        case 13: 
          { //System.out.println("block");
    Expression e = solve_block();
    stack.push(e);
          }
        case 27: break;
        case 3: 
          { stack.push(new VarNode(yytext()));
          }
        case 28: break;
        case 5: 
          { stack.push(new Symbol("/"));
          }
        case 29: break;
        case 20: 
          { stack.push(new Symbol("while"));
          }
        case 30: break;
        case 17: 
          { stack.push(new Symbol("int"));
          }
        case 31: break;
        case 8: 
          { stack.push(new Symbol(">"));
          }
        case 32: break;
        case 7: 
          { Expression e = solve_bracket(); //scot ce am pe stiva pana la "(" inclusiv si formez un nou element
    stack.push(e);  //pun elementul nou format inapoi pe stiva
          }
        case 33: break;
        case 16: 
          { stack.push(new Symbol("&&"));
          }
        case 34: break;
        case 19: 
          { stack.push(new Symbol("else"));
          }
        case 35: break;
        case 9: 
          { stack.push(new Symbol("!"));
          }
        case 36: break;
        case 11: 
          { if(varList.isEmpty()) {
        varList();
    } else {
        Expression as = solve_assignment(); //scot ce am pe stiva pana la elementul din 
                                                //fata egalului
        stack.push(as); //pun elementul nou format la loc pe stiva
        //System.out.println("ass");
    }
          }
        case 37: break;
        case 18: 
          { stack.push(new BoolNode(yytext()));
          }
        case 38: break;
        case 1: 
          { 
          }
        case 39: break;
        case 12: 
          { stack.push(new Symbol("{"));
    //System.out.println("open block");
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                Expression tree = build_tree();
    stack.push(tree);
    return 0;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java ExpressionFlexLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        ExpressionFlexLexer scanner = null;
        try {
          scanner = new ExpressionFlexLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
